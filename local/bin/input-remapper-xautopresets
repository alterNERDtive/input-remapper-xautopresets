#!/bin/bash

# ------------------------------ #
# Global Variable Initialization #
# ------------------------------ #

parent_app_name=input-remapper
app_name=${0#*$parent_app_name-*}
version="1.1.5"
desc="Automatic input-remapper preset manager for systems with access to xdotool and xprop"
app_dir=~/.config/${parent_app_name}-2
log_dir="$app_dir/logs"
config_file="$app_dir/$app_name.ini"
app_log="$log_dir/$app_name.log"
active_presets="$log_dir/.active"
app_section=PROGRAM
ignore_section=IGNORE
active_section=ACTIVEPRESETS
global_section=GLOBAL
disable_preset=_STOP
ignore_preset=_IGNORE
notset_preset=_NOTSET
default_class=_DEFAULT

declare -A configuration

file_escape ()
{
  echo "${@//\//\_}"
}

# --------------- #
# Option Handling #
# --------------- #

Help ()
{
    echo -e "\n$parent_app_name-$app_name v$version"
    echo -e "$desc\n"
    echo -e "Valid options:"
    echo "-h        Display this table"
    echo -e "-v        Display version number\n"
    echo -e "Valid arguments:"
    echo -e "[enable|disable|restart|start|status|stop]:\n\truns systemctl --user [command] $parent_app_name-$app_name.service\n"
    echo -e "getwindowinfo:\n\tSelect a window with the mouse and print the window's class and title\n"
    echo -e "Example useage:\n\t$parent_app_name-$app_name start\n\t$parent_app_name-$app_name getwindowinfo\n"
    echo "Either provide a vaild argument or envoke 'systemctl' directly."
}

while getopts :hv option; do
    case "${option}" in

        h)  Help
            exit ;;

        v)  echo "$parent_app_name-$app_name v$version"
            exit ;;

        ?)  echo "invalid option \"-${OPTARG}\""
            Help
            exit ;;

    esac
done

# ----------------- #
# Argument Handling #
# ----------------- #

if [ $# -gt 0 ]; then
    for command in ${@}; do
        case "$command" in

            enable|disable|restart|start|status|stop)   systemctl --user $command "$parent_app_name-$app_name.service" ;;

            getwindowinfo)  window=$(xprop -id $(xdotool selectwindow))
                            active_win_class=$(grep "WM_CLASS" <<< "$window" | sed -r "s/.*,\ \"//; s/\".*$//")
                            active_win_title=$(grep "_NET_WM_NAME(UTF8_STRING)" <<< "$window" | sed -r "s/.*=\ \"//; s/.$//")

                            echo "Class: $active_win_class"
                            echo "Title: $active_win_title" ;;

            *)  echo "Unknown argument '$command'"
                Help ;;

        esac
    done
    exit
fi

# -------------------- #
# Run As Service Check #
# -------------------- #

if [ -z "${INVOCATION_ID}" ]; then
    echo "Please use 'systemctl --user start input-remapper-xautopresets.service' to run this program"
    exit
fi

# ------------------ #
# Log Initialization #
# ------------------ #

[ ! -d "$log_dir" ] && mkdir "$log_dir"

for log in "$log_dir"/*.log; do
    [ "${log#*$log_dir*}" != "*.log" ] && echo -e "$parent_app_name-$app_name v$version\n" > "$log"
done

# -------------------------- #
# Local Function Definitions #
# -------------------------- #

SectionNames () # Input: Stream from cleaned config file
{               # Output: List of section names
    grep "^\[" < "${1:-/dev/stdin}" | sed "s/^\[//; s/\]*$//"
}

SectionSettings ()  # Input: Stream from cleaned config file
{                   # Output: Stream with section names removed

    sed '/^\s*$/d' < "${1:-/dev/stdin}" | sed -r 's/^\[.*$/;/g' | tail -n +2
    echo ";"
}

ReadIni ()  # Populates configuration array from file
{
    echo "Reading configuration file..." >> "$app_log"
    clean_config="$(sed -r "s/;.*//g" $config_file | sed "s/^[ \t]*//; s/[ \t]*$//g")"

    while IFS= read -r -d $'\n' section <&3 && read -r -d $';' settings <&4; do

        configuration["$section"]="$settings"

    done 3< <(SectionNames <<< "$clean_config") 4< <(SectionSettings <<< "$clean_config")
    echo -e "Done!\n" >> "$app_log"
}

ConfigValue ()  # Inputs: Setting name & config section
{               # Output: Value of setting

    line="$(grep "^$1\=" "${2:-/dev/stdin}" | tail -1)"
    echo "${line#*=*}"
}

IsIgnored ()    # Input: Device name
{               # Output: Device name if ignored, else nothing

    grep "^$1$" <<< "${configuration["$ignore_section"]}" | tail -1
}

CombineSections ()  # Inputs: Device name & class
{                   # Output: Sorted & combined list of all appropriate configuration sections

    echo "Section List:" >> "$log_dir/$(file_escape $2).log"
    echo "${configuration["$global_section"]}"
    if [ "$section_priority_setting" == "_CLASS" ]; then
        echo "${configuration["$2"]}"
        echo "${configuration["$global_section:$1"]}"
    else
        echo "${configuration["$global_section:$1"]}"
        echo "${configuration["$2"]}"
    fi
    echo "${configuration["$2:$1"]}"
}

PresetList ()   # Inputs: Window class & title; stream to presorted config section (default: /dev/stdin)
{               # Output: List of matching presets

    dev_log="$log_dir/$(file_escape $3).log"
    section_list="$(sed "/^\s*$/d" < "${4:-/dev/stdin}")"
    classlist=""

    echo -e "$section_list\n" >> "$dev_log"
    echo "Preset List:" >> "$dev_log"

    while IFS= read -r -d $'\n'; do
        if [ "${REPLY%*=*}" == "$default_class" ]; then
            echo "${REPLY#*=*}"
        elif [ "${REPLY%*=*}" == "$1" ] || [[ "$2" == ${REPLY%*=*} ]]; then
            if [ "$default_priority_setting" == "_CLASS" ]; then
                classlist+="${REPLY#*=*}\n"
            else
                echo "${REPLY#*=*}"
            fi
        fi
    done <<< "$section_list"
    if [ "$classlist" != "" ]; then
        echo -e "$classlist"
    fi

}

TargetPreset () # Input: Device name & stream to list of appropriate presets sorted in order of priority (default $(tac /dev/stdin))
{               # Output: Target preset

    dev_log="$log_dir/$(file_escape $1).log"
    preset_list="$(tac "${2:-/dev/stdin}")"
    echo -e "$preset_list\n" >> "$dev_log"
    echo "Target Preset:" >> "$dev_log"
    while IFS= read -r -d $'\n'; do
        if [ -f "$REPLY.json" ] || [ "$REPLY" == "$disable_preset" ] || [ "$REPLY" == "$ignore_preset" ]; then
            echo "$REPLY"
            return
        fi
    done <<< "$preset_list"
    echo "$notset_preset"
}

SetPreset () # Input: device name; target preset name (default: $(cat /dev/stdin))
{            # Output: active preset

    dev_name="$1"
    dev_log="$log_dir/$(file_escape $dev_name).log"
    target_preset="${2:-$(cat /dev/stdin)}"
    active_preset="$(ConfigValue "$device" <<< "${configuration["$active_section"]}")"

    echo -e "$target_preset\n" >> "$dev_log"

    [ "$active_preset" == "" ] &&
        active_preset="$disable_preset"

    case "$target_preset" in

        "$notset_preset")
            target_preset="$notset_setting" ;;&

        "$active_preset")
            echo "PRESET:[$active_preset] is already active on DEVICE:[$dev_name]" >> "$dev_log"
            echo "$dev_name=$active_preset" >> "$active_presets" ;;

        "$ignore_preset")
            echo "DEVICE:[$dev_name] is configured to ignore this change of active window" >> "$dev_log"
            echo "$dev_name=$active_preset" >> "$active_presets";;

        "$disable_preset")
            echo "Stopping input-remapper injection on DEVICE:[$dev_name]" >> "$dev_log"
            input-remapper-control --command stop --device "$dev_name" &>> "$dev_log"
            echo "$dev_name=$disable_preset" >> "$active_presets";;

        *)  echo "Setting DEVICE:[$dev_name] to PRESET:[$target_preset]" >> "$dev_log"
            input-remapper-control --command start --device "$dev_name" --preset "$target_preset" &>> "$dev_log"
            echo "$dev_name=$target_preset" >> "$active_presets";;
    esac
}

ConfigureDevice ()  # Input: Device name, window class & title
{                   # Output: Changes and reports device's active preset

    cd "presets/$(file_escape $1)"

    device="$1"
    class="$2"
    title="$3"
    dev_log="$log_dir/$(file_escape $device).log"

    echo "Active window has changed!" >> "$dev_log"
    echo "Class: $class" >> "$dev_log"
    echo -e "Title: $title\n" >> "$dev_log"

    CombineSections "$class" "$device" | PresetList "$class" "$title" "$device"| TargetPreset "$device" | SetPreset "$device"

    echo -e "\n\n---------------------------------------------------------------\n\n" >> "$dev_log"
    echo "DEVICE:[$device] Done!" >> "$app_log"
}

# --------- #
# Main Loop #
# --------- #

execution_setting=
notset_setting=
section_priority_setting=
default_priority_setting=

{
    cd "$app_dir"
    class=
    last_class=
    title=
    last_title=

    while [ true ]; do

        window=$(xprop -id $(xdotool getactivewindow))

        class=$(grep "WM_CLASS" <<< "$window" | sed -r "s/.*,\ \"//; s/\".*$//" 2>> "$app_log")
        title=$(grep "_NET_WM_NAME(UTF8_STRING)" <<< "$window" | sed -r "s/.*=\ \"//; s/.$//" 2>> "$app_log")

        if [ "$class" != "$last_class" ] || [ "$title" != "$last_title" ]; then

            echo "Active window has changed!" >> "$app_log"
            echo "Class: $class" >> "$app_log"
            echo -e "Title: $title\n" >> "$app_log"

            if [ -f "$config_file" ]; then
                ReadIni
            else
                xautopresets-config -n
            fi

            touch "$active_presets"

            execution_setting="$(ConfigValue "_EXECUTION" <<< "${configuration["$app_section"]}")"
            notset_setting="$(ConfigValue "$notset_preset" <<< "${configuration["$app_section"]}")"
            section_priority_setting="$(ConfigValue "_SECTIONPRIORITY" <<< "${configuration["$app_section"]}")"
            default_priority_setting="$(ConfigValue "_DEFAULTPRIORITY" <<< "${configuration["$app_section"]}")"

            while IFS=  read -r -d $'\n'; do

                    if [ -d "presets/$(file_escape $REPLY)" ] && [ "$REPLY" != "" ] && [ ! "$(IsIgnored "$REPLY")" ]; then

                        echo "Configuring DEVICE:[$REPLY]..." >> "$app_log"
                        if [  "$execution_setting" == "_SERIAL" ]; then

                            ConfigureDevice "$REPLY" "$class" "$title"
                            cd "$app_dir"

                        else
                            ConfigureDevice "$REPLY" "$class" "$title"&
                        fi
#                     else
#                         echo "Ignoring DEVICE:[$REPLY]" >> "$app_log"
                    fi
                done < <(input-remapper-control --list 2>> /dev/null)

                wait

                echo -e "\nActive Presets:" >> "$app_log"

                last_class="$class"
                last_title="$title"

                configuration=()
                configuration["$active_section"]="$(cat "$active_presets")"
                echo -e "${configuration["$active_section"]}" >> "$app_log"
                rm "$active_presets"

                echo -e "\n\n---------------------------------------------------------------\n\n" >> "$app_log"
        fi
        sleep .1s
    done
}
